{
    "name": {
        "name": "Name",
        "value": "Provide Stage name."
    },
    "chooseStorage": "Choose storage",
    "storage": {
        "name": "Storage",
        "value1": "Depending on the selected storage type, the corresponding parameters are displayed."
    },
    "writeMode": {
        "name": "Write mode",
        "value": "1. Append. Append mode means that when saving a DataFrame to a data source, if data/table",
        "value1": "already exists, contents of the DataFrame are expected to be appended to existing data.",
        "value2": "2. Overwrite. It means that when saving a DataFrame to a data source, if data/table already",
        "value3": "exists, existing data is expected to be overwritten by the contents of the DataFrame.",
        "value4": "3. Error If Exists. This mode means that when saving a DataFrame to a data source, if data",
        "value5": "already exists, an exception is expected to be thrown."
    },

    "DB2": {
        "JDBCURL": {
            "name": "JDBC URL",
            "value": "A database connection URL is a string that your DBMS JDBC driver uses to connect to a database",
            "value1": "The connection URL format for the driver is:",
            "value2": "jdbc:database-type://hostname:port[;property=value[;...]]"
        },
        "user": {
            "name": "User",
            "value": "User name for a JDBC connection."
        },
        "password": {
            "name": "Password",
            "value": "Password for a JDBC connection."
        },
        "customSql": {
            "name": "Custom SQL",
            "value": "Displays the schema and the table fields, if you choose false. If you choose true, you will be able to write your own SQL code in the provided field."
        },
        "schema": {
            "name": "Schema",
            "value": "Schema that the table used for reading belongs to."
        },
        "table": {
            "name": "Table",
            "value": "Database table name."
        },
        "optionDbtable": {
            "name": "SQL statement",
            "value": "The code of your own SQL query.",
            "value1": "- You have to specify both schema name and table name in your custom SQL query.",
            "value2": "- Column names must be surrounded by double quotes.",
            "value3": "- Any syntactic error in SQL query wouldn't be highlighted."
        },
        "certData": {
            "name": "CertData (optional)",
            "value": "Enter certification data if needed."
        }
    },
    "COS": {
        "authType": {
            "name": "Authentication type",
            "value": "Authentication type which displays accessKey and secretKey, if you choose HMAC, or iamApiKey and iamServiceId, if you choose IAM."
        },
        "endpoint": {
            "name": "Endpoint",
            "value": "The endpoint that a service will talk to, for example, 's3.us-south.objectstorage.softlayer.net'."
        },
        "accessKey": {
            "name": "Access key",
            "value": "The COS access key ID."
        },
        "secretKey": {
            "name": "Secret key",
            "value": "The COS secret access key."
        },
        "iamApiKey": {
            "name": "Api key",
            "value": "The COS IAM api key."
        },
        "iamServiceId": {
            "name": "ServiceId key",
            "value": "The COS IAM service id."
        },
        "bucket": {
            "name": "Bucket",
            "value": "Name of the basic containers for holding your data."
        },
        "pathInBucket": {
            "name": "Path in bucket",
            "value": "Path in the bucket."
        },
        "format": {
            "name": "File format",
            "value": "Spark DataFrame format.",
            "value1": "For CSV, please, specify Header and Delimiter."
        }
    },
    "AWS": {
        "anonymousAccess": {
            "name": "Anonymous access",
            "value": "Anonymous access which does not display accessKey and secretKey"
        },
        "endpoint": {
            "name": "Endpoint",
            "value": "The endpoint that a service will talk to, for example, 's3.us-south.objectstorage.softlayer.net'."
        },
        "accessKey": {
            "name": "Access key",
            "value": "The AWS access key ID."
        },
        "secretKey": {
            "name": "Secret key",
            "value": "The AWS secret access key."
        },
        "bucket": {
            "name": "Bucket",
            "value": "Name of the basic containers for holding your data."
        },
        "pathInBucket": {
            "name": "Path in bucket",
            "value": "Path in the bucket."
        },
        "format": {
            "name": "File format",
            "value": "Spark DataFrame format.",
            "value1": "For CSV, please, specify Header and Delimiter."
        }
    },
    "ELASTIC": {
        "nodes": {
            "name": "Nodes",
            "value": "Node is an instance of an Elasticsearch where you can store, index, and search data."
        },
        "port": {
            "name": "Port",
            "value": "Port to bind to for incoming HTTP requests."
        },
        "user": {
            "name": "User",
            "value": "User name for connection."
        },
        "password": {
            "name": "Password",
            "value": "Password for connection."
        },
        "index": {
            "name": "Index",
            "value": "The index where the document resides."
        },
        "ssl": {
            "name": "SSL",
            "value": "Whether to enable SSL connections on all supported protocols.",
            "value1": "False by default.",
            "value2": "If it set to True then CertData is available, but it is optional."
        },
        "certData": {
            "name": "CertData (optional)",
            "value": "Enabled when SSL is set to True.",
            "value1": "Enter certification data for SSL connection if needed."
        }
    },
    "MONGO": {
        "database": {
            "name": "Database",
            "value": "MongoDB database name."
        },
        "collection": {
            "name": "Collection",
            "value": "MongoDB database name."
        },
        "host": {
            "name": "Host",
            "value": "MongoDB hostname or IP address."
        },
        "port": {
            "name": "Port",
            "value": "MongoDB port."
        },
        "user": {
            "name": "User",
            "value": "Name of the MongoDB user."
        },
        "password": {
            "name": "Password",
            "value": "Password of the MongoDB user."
        }
    },
    "CASSANDRA": {
        "keyspace": {
            "name": "Keyspace",
            "value": "Name of the keyspace to connect to."
        },
        "table": {
            "name": "Table",
            "value": "Name of the table to connect to."
        },
        "cluster": {
            "name": "Cluster (optional)",
            "value": "Name of the cluster to connect to."
        },
        "host": {
            "name": "Host",
            "value": "Contact point to connect to the Cassandra cluster."
        },
        "port": {
            "name": "Port",
            "value": "Cassandra native connection port."
        },
        "ssl": {
            "name": "SSL",
            "value": "Enable secure connection to Cassandra cluster."
        },
        "username": {
            "name": "Username",
            "value": "Login name for password authentication."
        },
        "password": {
            "name": "Password",
            "value": "Password for password authentication."
        },
        "pushdownEnabled": {
            "name": "Push down enabled",
            "value": "Whether to use pushdown optimizations."
        },
        "certData": {
            "name": "certData (optional)",
            "value": "Custom certificate for ssl connection."
        }
    },
    "noAdditionalFields": "There are no additional fields."
}
